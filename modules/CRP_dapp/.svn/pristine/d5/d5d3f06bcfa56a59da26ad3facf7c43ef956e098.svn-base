const fs = require('fs'); // file-system
const path = require('path'); // path-package
/* 파라메터 체크 */
console.log('* param1 (provider):.......' + process.argv[2]);
console.log('* param2 (web3 path):......' + process.argv[3]);
console.log('* param3 (owner account):..' + process.argv[4]);
console.log('* param4 (owner password):.' + process.argv[5]);
console.log('* param5 (main contract):..' + process.argv[6]);
const provider = process.argv[2];
const owner = process.argv[4];
const passwd = process.argv[5];
const main_address = process.argv[6];
let web3_path = (process.argv[3] == 'null') ? ('web3') : (process.argv[3]);
/* web3 provider 설정 */
const Web3 = require(web3_path); // web3 api
let web3 = new Web3();
web3.setProvider(new web3.providers.HttpProvider(provider)); // set provider
/* deploy에 필요한 요소들 추출 (abi, data, gas) */

let abi_path = path.resolve(__dirname, 'abi', 'CrpSaleMain.abi'); // abi가 저장된 file path
let data_path = path.resolve(__dirname, 'data', 'CrpSaleMain.data'); // data를 저장할 file path
let abi = fs.readFileSync(abi_path, 'utf-8'); // abi 추출
let Main = web3.eth.contract(JSON.parse(abi)); // get contract
let sale_contract = Main.at(main_address);
let data = fs.readFileSync(data_path, 'utf-8'); // bytecode 추출


/**
 * 지정된 시간(ms)만큼 대기한다.  
 *
 * @param _ms 지정한 시간 (ms)
 * @return promise object
 * @author jhhong
 */
function milisleep(_ms) {
    return new Promise(resolve => setTimeout(resolve, _ms));
}

/** 
 * @author sykang
 */
let halt_crowdsale = async () => {
    try {
        await milisleep(1000);
        await web3.personal.unlockAccount(owner, passwd); // Unlock Account
        // let main_addr = await web3.eth.getMainContractAddress(owner);
        // if(main_addr == '0x0000000000000000000000000000000000000000') {
        //     throw new Error('The main contact created by [' + owner + '] does not exist.!');
        // }
        // let contract = Main.at(main_address);
        let receipt; // receipt object를 받을 변수
        let tx;
        let gas = web3.eth.estimateGas({
            data: data
        }); // gas값 계산

        console.log('----- sale halt -----');
        tx = await sale_contract.saleHalt({
            from: owner,
        });
        console.log('TX Hash=[' + tx + ']');
        do {
            receipt = await web3.eth.getTransactionReceipt(tx); // receipt 확인
            if (receipt) {
                console.log("Tx included! BlockHash=[" + receipt.blockHash + "]");
                console.log("Tx included! BlockNumber=[" + receipt.blockNumber + "]");
                break;
            }
            console.log("Wait for including Tx... Block=[" + web3.eth.blockNumber + "]");
            await milisleep(4000); // 4초 대기
        } while (!receipt);


        let result_sale = await sale_contract.total_staff_CRP({
            from: owner
        }).toNumber();
        if (result_sale == 0) { //refund
            let head = await sale_contract.chain_head({from: owner});
            let tail = await sale_contract.chain_last({from: owner});        
            do{
                
            }while()
        } else { //proceeding
            
        }
        await web3.personal.lockAccount(owner); // Lock Account
    } catch (err) {
        console.log(err);
    }
}
halt_crowdsale();